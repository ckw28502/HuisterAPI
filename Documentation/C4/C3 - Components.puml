@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons

!include DEVICONS/react.puml
!include DEVICONS/mysql.puml

'Containers
Container(spa,"Single Page Application","React",$sprite="react","Provides facilities for users")
ContainerDb(db,"Database","MySQL",$sprite="mysql","Stores users data, properties data, orders data")

'Components
System_Boundary(c1,"Huister API Application"){

    'Controllers
    Component(userController,"User Controller","Spring Boot Controller","Allows user to create user and get user data")
    Component(propertyController,"Property Controller","Spring Boot Controller", "Allows user to create property, get property data, update property data, delete property, and create an order on a property")
    Component(orderController,"Order Controller","Spring Boot Controller", "Allows user to create order, cancel order, accept order, reject order, or get order data")

    'Services
    Component(userService,"User Service","Spring Boot Service","Provides functionality related to the business logic related to users")
    Component(propertyService,"Property Service","Spring Boot Service","Provides functionality related to the business logic related to properties")
    Component(orderService,"Order Service","Spring Boot Service","Provides functionality related to the business logic related to orders")

    'Repositories
    Component(userRepository,"User Repository","Spring Boot Repository","Provides functionality to read and writes to user table in the database")
    Component(propertyRepository,"Property Repository","Spring Boot Repository","Provides functionality to read and writes to property table in the database")
    Component(cityRepository,"City Repository","Spring Boot Repository","Provides functionality to read and writes to city table in the database")
    Component(orderRepository,"Order Repository","Spring Boot Repository","Provides functionality to read and writes to order table in the database")

}

'Relations from Single Page Application to controller
Rel(spa,userController,"Make API calls to","http")
Rel(spa,propertyController,"Make API calls to","http")
Rel(spa,orderController,"Make API calls to","http")

'Relations from controller to service
Rel(userController,userService,"Uses")
Rel(propertyController,propertyService,"Uses")
Rel(orderController,orderService,"Uses")

'Relations from service to repository
Rel(userService,userRepository,"Uses")
Rel(propertyService,userRepository,"Uses")
Rel(propertyService,propertyRepository,"Uses")
Rel(propertyService,cityRepository,"Uses")
Rel(orderService,userRepository,"Uses")
Rel(orderService,propertyRepository,"Uses")
Rel(orderService,orderRepository,"Uses")

'Relations from repository to database
Rel(userRepository,db,"Reads from and writes to","jdbc")
Rel(propertyRepository,db,"Reads from and writes to","jdbc")
Rel(cityRepository,db,"Reads from and writes to","jdbc")
Rel(orderRepository,db,"Reads from and writes to","jdbc")

@enduml