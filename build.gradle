plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.sonarqube" version "4.2.1.3168"
	id 'jacoco'
	id "org.flywaydb.flyway" version '8.0.0'


}

def applicationPropertiesFile = file('src/main/resources/application.properties')

if (applicationPropertiesFile.exists()) {
	def properties = new Properties()
	applicationPropertiesFile.withInputStream { inputStream ->
		properties.load(inputStream)
	}

	// Configure Flyway
	flyway {
		url = properties.getProperty('spring.datasource.url')
		driver = 'com.mysql.cj.jdbc.Driver'
		user = properties.getProperty('spring.datasource.username')
		password = properties.getProperty('spring.datasource.password')
	}
} else {
	throw new GradleException("application.properties file not found!")
}

group = 'nl.fontys.s3'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}
//local sonarQube
//sonar {
//	properties {
//		property("sonar.projectKey", "HuisterAPI")
//		property("sonar.organization", "HuisterAPI")
//		property("sonar.host.url", "http://localhost:9000")
//	}
//}

//GitLab sonarQube
sonar {
	properties {
		property "sonar.projectKey", "I528859_huister_AYuVk4uVVuR86IZV8EmV"
		property "sonar.projectName", "Huister API"
		property "sonar.qualitygate.wait", true
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.flywaydb:flyway-mysql:8.4.4'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required =true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/configuration/*"
			])
		}))
	}
}